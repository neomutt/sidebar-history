diff -N -c -r mutt-1.5.12-orig/buffy.c mutt-1.5.12-patched/buffy.c
*** mutt-1.5.12-orig/buffy.c	2006-05-18 13:44:28.000000000 -0500
--- mutt-1.5.12-patched/buffy.c	2006-07-17 21:46:45.000000000 -0500
***************
*** 267,273 ****
    char path[_POSIX_PATH_MAX];
    struct stat contex_sb;
    time_t t;
! 
  #ifdef USE_IMAP
    /* update postponed count as well, on force */
    if (force)
--- 267,273 ----
    char path[_POSIX_PATH_MAX];
    struct stat contex_sb;
    time_t t;
!   CONTEXT *ctx;
  #ifdef USE_IMAP
    /* update postponed count as well, on force */
    if (force)
***************
*** 302,307 ****
--- 302,309 ----
    
    for (tmp = Incoming; tmp; tmp = tmp->next)
    {
+     if ( tmp->new == 1 )
+       tmp->has_new = 1;
  #ifdef USE_IMAP
      if (tmp->magic != M_IMAP)
  #endif
***************
*** 360,369 ****
        case M_MBOX:
        case M_MMDF:
  
! 	if (STAT_CHECK)
  	{
  	  BuffyCount++;
! 	  tmp->new = 1;
  	}
  #ifdef BUFFY_SIZE
  	else
--- 362,387 ----
        case M_MBOX:
        case M_MMDF:
  
!         {
!         if (STAT_CHECK || tmp->msgcount == 0)
  	{
+  	  BUFFY b = *tmp;
+  	  int msgcount = 0;
+  	  int msg_unread = 0;
  	  BuffyCount++;
!  	  /* parse the mailbox, to see how much mail there is */
!  	  ctx = mx_open_mailbox( tmp->path, M_READONLY | M_QUIET | M_NOSORT | M_PEEK, NULL);
!  	  if(ctx)
!  	  {
!             msgcount = ctx->msgcount;
!  	    msg_unread = ctx->unread;
!  	    mx_close_mailbox(ctx, 0);
!  	  }
!  	  *tmp = b;
!  	  tmp->msgcount = msgcount;
!  	  tmp->msg_unread = msg_unread;
!  	  if(STAT_CHECK)
!  	    tmp->has_new = tmp->new = 1;
  	}
  #ifdef BUFFY_SIZE
  	else
***************
*** 372,409 ****
  	  tmp->size = (long) sb.st_size;
  	}
  #endif
! 	if (tmp->newly_created &&
! 	    (sb.st_ctime != sb.st_mtime || sb.st_ctime != sb.st_atime))
! 	  tmp->newly_created = 0;
! 
! 	break;
  
        case M_MAILDIR:
  
  	snprintf (path, sizeof (path), "%s/new", tmp->path);
  	if ((dirp = opendir (path)) == NULL)
  	{
  	  tmp->magic = 0;
  	  break;
  	}
  	while ((de = readdir (dirp)) != NULL)
  	{
  	  char *p;
  	  if (*de->d_name != '.' && 
  	      (!(p = strstr (de->d_name, ":2,")) || !strchr (p + 3, 'T')))
  	  {
! 	    /* one new and undeleted message is enough */
! 	    BuffyCount++;
! 	    tmp->new = 1;
! 	    break;
  	  }
  	}
  	closedir (dirp);
  	break;
  
        case M_MH:
! 	if ((tmp->new = mh_buffy (tmp->path)) > 0)
! 	  BuffyCount++;
  	break;
        }
      }
--- 390,470 ----
  	  tmp->size = (long) sb.st_size;
  	}
  #endif
!         if (tmp->newly_created &&
!             (sb.st_ctime != sb.st_mtime || sb.st_ctime != sb.st_atime))
!           tmp->newly_created = 0;
!         }
!         break;
  
        case M_MAILDIR:
  
+         /* count new message */
  	snprintf (path, sizeof (path), "%s/new", tmp->path);
  	if ((dirp = opendir (path)) == NULL)
  	{
  	  tmp->magic = 0;
  	  break;
  	}
+  	tmp->msgcount = 0;
+  	tmp->msg_unread = 0;
  	while ((de = readdir (dirp)) != NULL)
  	{
  	  char *p;
  	  if (*de->d_name != '.' && 
  	      (!(p = strstr (de->d_name, ":2,")) || !strchr (p + 3, 'T')))
  	  {
!  	    tmp->has_new = tmp->new = 1;
!             tmp->msgcount++;
!             tmp->msg_unread++;
!  	  }
!  	}
!         if(tmp->msg_unread)
!           BuffyCount++;
!  
!  	closedir (dirp);
!  
!         /*
!          * count read messages (for folderlist (sidebar) we also need to count
!          * messages in cur so that we the total number of messages
!          */
!  	snprintf (path, sizeof (path), "%s/cur", tmp->path);
!  	if ((dirp = opendir (path)) == NULL)
!  	{
!  	  tmp->magic = 0;
!  	  break;
!  	}
!  	while ((de = readdir (dirp)) != NULL)
!  	{
!  	  char *p;
!  	  if (*de->d_name != '.' && 
! 	      (!(p = strstr (de->d_name, ":2,")) || !strchr (p + 3, 'T')))
!  	  {
!             tmp->msgcount++;
  	  }
  	}
  	closedir (dirp);
  	break;
  
        case M_MH:
!       {
!       DIR *dp;
!       struct dirent *de;
!       if ((tmp->new = mh_buffy (tmp->path)) > 0)
!         BuffyCount++;
!    
!       if ((dp = opendir (path)) == NULL)
!         break;
!       tmp->msgcount = 0;
!       while ((de = readdir (dp)))
!       {
!         if (mh_valid_message (de->d_name))
!         {
! 	  tmp->msgcount++;
!  	  tmp->has_new = tmp->new = 1;
!         }
!       }
!       closedir (dp);
!       }
  	break;
        }
      }
diff -N -c -r mutt-1.5.11-orig/buffy.h mutt-1.5.11-patched/buffy.h
*** mutt-1.5.11-orig/buffy.h	2002-12-11 06:19:39.000000000 -0500
--- mutt-1.5.11-patched/buffy.h	2006-01-27 00:29:03.000000000 -0500
***************
*** 27,33 ****
--- 27,37 ----
    long size;
  #endif				/* BUFFY_SIZE */
    struct buffy_t *next;
+   struct buffy_t *prev;
    short new;			/* mailbox has new mail */
+   short has_new;		/* set it new if new and not read */
+   int msgcount;			/* total number of messages */
+   int msg_unread;		/* number of unread messages */
    short notified;		/* user has been notified */
    short magic;			/* mailbox type */
    short newly_created;		/* mbox or mmdf just popped into existence */
diff -N -c -r mutt-1.5.11-orig/color.c mutt-1.5.11-patched/color.c
*** mutt-1.5.11-orig/color.c	2005-02-03 13:47:52.000000000 -0500
--- mutt-1.5.11-patched/color.c	2006-01-27 00:29:03.000000000 -0500
***************
*** 93,98 ****
--- 93,99 ----
    { "bold",		MT_COLOR_BOLD },
    { "underline",	MT_COLOR_UNDERLINE },
    { "index",		MT_COLOR_INDEX },
+   { "sidebar_new",	MT_COLOR_NEW },
    { NULL,		0 }
  };
  
diff -N -c -r mutt-1.5.11-orig/compose.c mutt-1.5.11-patched/compose.c
*** mutt-1.5.11-orig/compose.c	2005-08-11 15:37:23.000000000 -0400
--- mutt-1.5.11-patched/compose.c	2006-01-27 00:29:03.000000000 -0500
***************
*** 72,78 ****
  
  #define HDR_XOFFSET 10
  #define TITLE_FMT "%10s" /* Used for Prompts, which are ASCII */
! #define W (COLS - HDR_XOFFSET)
  
  static char *Prompts[] =
  {
--- 72,78 ----
  
  #define HDR_XOFFSET 10
  #define TITLE_FMT "%10s" /* Used for Prompts, which are ASCII */
! #define W (COLS - HDR_XOFFSET - SidebarWidth)
  
  static char *Prompts[] =
  {
***************
*** 115,130 ****
    if ((WithCrypto & APPLICATION_PGP) && (WithCrypto & APPLICATION_SMIME))
    {     
      if (!msg->security)
!       mvaddstr (HDR_CRYPT, 0,     "Security: ");
      else if (msg->security & APPLICATION_SMIME)
!       mvaddstr (HDR_CRYPT, 0,     "  S/MIME: ");
      else if (msg->security & APPLICATION_PGP)
!       mvaddstr (HDR_CRYPT, 0,     "     PGP: ");
    }
    else if ((WithCrypto & APPLICATION_SMIME))
!     mvaddstr (HDR_CRYPT, 0,     "  S/MIME: ");
    else if ((WithCrypto & APPLICATION_PGP))
!     mvaddstr (HDR_CRYPT, 0,     "     PGP: ");
    else
      return;
  
--- 115,130 ----
    if ((WithCrypto & APPLICATION_PGP) && (WithCrypto & APPLICATION_SMIME))
    {     
      if (!msg->security)
!       mvaddstr (HDR_CRYPT, SidebarWidth,     "Security: ");
      else if (msg->security & APPLICATION_SMIME)
!       mvaddstr (HDR_CRYPT, SidebarWidth,     "  S/MIME: ");
      else if (msg->security & APPLICATION_PGP)
!       mvaddstr (HDR_CRYPT, SidebarWidth,     "     PGP: ");
    }
    else if ((WithCrypto & APPLICATION_SMIME))
!     mvaddstr (HDR_CRYPT, SidebarWidth,     "  S/MIME: ");
    else if ((WithCrypto & APPLICATION_PGP))
!     mvaddstr (HDR_CRYPT, SidebarWidth,     "     PGP: ");
    else
      return;
  
***************
*** 148,154 ****
      }
    clrtoeol ();
  
!   move (HDR_CRYPTINFO, 0);
    clrtoeol ();
    if ((WithCrypto & APPLICATION_PGP)
        && msg->security & APPLICATION_PGP  && msg->security & SIGN)
--- 148,154 ----
      }
    clrtoeol ();
  
!   move (HDR_CRYPTINFO, SidebarWidth);
    clrtoeol ();
    if ((WithCrypto & APPLICATION_PGP)
        && msg->security & APPLICATION_PGP  && msg->security & SIGN)
***************
*** 164,170 ****
        && (msg->security & ENCRYPT)
        && SmimeCryptAlg
        && *SmimeCryptAlg) {
!       mvprintw (HDR_CRYPTINFO, 40, "%s%s", _("Encrypt with: "),
  		NONULL(SmimeCryptAlg));
        off = 20;
    }
--- 164,170 ----
        && (msg->security & ENCRYPT)
        && SmimeCryptAlg
        && *SmimeCryptAlg) {
!       mvprintw (HDR_CRYPTINFO, SidebarWidth + 40, "%s%s", _("Encrypt with: "),
  		NONULL(SmimeCryptAlg));
        off = 20;
    }
***************
*** 178,184 ****
    int c;
    char *t;
  
!   mvaddstr (HDR_MIX, 0,     "     Mix: ");
  
    if (!chain)
    {
--- 178,184 ----
    int c;
    char *t;
  
!   mvaddstr (HDR_MIX, SidebarWidth,     "     Mix: ");
  
    if (!chain)
    {
***************
*** 193,199 ****
      if (t && t[0] == '0' && t[1] == '\0')
        t = "<random>";
      
!     if (c + mutt_strlen (t) + 2 >= COLS)
        break;
  
      addstr (NONULL(t));
--- 193,199 ----
      if (t && t[0] == '0' && t[1] == '\0')
        t = "<random>";
      
!     if (c + mutt_strlen (t) + 2 >= COLS - SidebarWidth)
        break;
  
      addstr (NONULL(t));
***************
*** 245,251 ****
  
    buf[0] = 0;
    rfc822_write_address (buf, sizeof (buf), addr, 1);
!   mvprintw (line, 0, TITLE_FMT, Prompts[line - 1]);
    mutt_paddstr (W, buf);
  }
  
--- 245,251 ----
  
    buf[0] = 0;
    rfc822_write_address (buf, sizeof (buf), addr, 1);
!   mvprintw (line, SidebarWidth, TITLE_FMT, Prompts[line - 1]);
    mutt_paddstr (W, buf);
  }
  
***************
*** 255,264 ****
    draw_envelope_addr (HDR_TO, msg->env->to);
    draw_envelope_addr (HDR_CC, msg->env->cc);
    draw_envelope_addr (HDR_BCC, msg->env->bcc);
!   mvprintw (HDR_SUBJECT, 0, TITLE_FMT, Prompts[HDR_SUBJECT - 1]);
    mutt_paddstr (W, NONULL (msg->env->subject));
    draw_envelope_addr (HDR_REPLYTO, msg->env->reply_to);
!   mvprintw (HDR_FCC, 0, TITLE_FMT, Prompts[HDR_FCC - 1]);
    mutt_paddstr (W, fcc);
  
    if (WithCrypto)
--- 255,264 ----
    draw_envelope_addr (HDR_TO, msg->env->to);
    draw_envelope_addr (HDR_CC, msg->env->cc);
    draw_envelope_addr (HDR_BCC, msg->env->bcc);
!   mvprintw (HDR_SUBJECT, SidebarWidth, TITLE_FMT, Prompts[HDR_SUBJECT - 1]);
    mutt_paddstr (W, NONULL (msg->env->subject));
    draw_envelope_addr (HDR_REPLYTO, msg->env->reply_to);
!   mvprintw (HDR_FCC, SidebarWidth, TITLE_FMT, Prompts[HDR_FCC - 1]);
    mutt_paddstr (W, fcc);
  
    if (WithCrypto)
***************
*** 269,275 ****
  #endif
  
    SETCOLOR (MT_COLOR_STATUS);
!   mvaddstr (HDR_ATTACH - 1, 0, _("-- Attachments"));
    BKGDSET (MT_COLOR_STATUS);
    clrtoeol ();
  
--- 269,275 ----
  #endif
  
    SETCOLOR (MT_COLOR_STATUS);
!   mvaddstr (HDR_ATTACH - 1, SidebarWidth, _("-- Attachments"));
    BKGDSET (MT_COLOR_STATUS);
    clrtoeol ();
  
***************
*** 307,313 ****
    /* redraw the expanded list so the user can see the result */
    buf[0] = 0;
    rfc822_write_address (buf, sizeof (buf), *addr, 1);
!   move (line, HDR_XOFFSET);
    mutt_paddstr (W, buf);
    
    return 0;
--- 307,313 ----
    /* redraw the expanded list so the user can see the result */
    buf[0] = 0;
    rfc822_write_address (buf, sizeof (buf), *addr, 1);
!   move (line, HDR_XOFFSET+SidebarWidth);
    mutt_paddstr (W, buf);
    
    return 0;
***************
*** 553,559 ****
  	if (mutt_get_field ("Subject: ", buf, sizeof (buf), 0) == 0)
  	{
  	  mutt_str_replace (&msg->env->subject, buf);
! 	  move (HDR_SUBJECT, HDR_XOFFSET);
  	  clrtoeol ();
  	  if (msg->env->subject)
  	    mutt_paddstr (W, msg->env->subject);
--- 553,559 ----
  	if (mutt_get_field ("Subject: ", buf, sizeof (buf), 0) == 0)
  	{
  	  mutt_str_replace (&msg->env->subject, buf);
! 	  move (HDR_SUBJECT, HDR_XOFFSET + SidebarWidth);
  	  clrtoeol ();
  	  if (msg->env->subject)
  	    mutt_paddstr (W, msg->env->subject);
***************
*** 570,576 ****
  	{
  	  strfcpy (fcc, buf, _POSIX_PATH_MAX);
  	  mutt_pretty_mailbox (fcc);
! 	  move (HDR_FCC, HDR_XOFFSET);
  	  mutt_paddstr (W, fcc);
  	  fccSet = 1;
  	}
--- 570,576 ----
  	{
  	  strfcpy (fcc, buf, _POSIX_PATH_MAX);
  	  mutt_pretty_mailbox (fcc);
! 	  move (HDR_FCC, HDR_XOFFSET + SidebarWidth);
  	  mutt_paddstr (W, fcc);
  	  fccSet = 1;
  	}
diff -N -c -r mutt-1.5.12-orig/curs_main.c mutt-1.5.12-patched/curs_main.c
*** mutt-1.5.12-orig/curs_main.c	2006-06-08 06:50:29.000000000 -0500
--- mutt-1.5.12-patched/curs_main.c	2006-07-17 21:03:07.000000000 -0500
***************
*** 29,34 ****
--- 29,35 ----
  #include "sort.h"
  #include "buffy.h"
  #include "mx.h"
+ #include "sidebar.h"
  
  #ifdef USE_POP
  #include "pop.h"
***************
*** 544,549 ****
--- 545,551 ----
      if (menu->redraw & REDRAW_FULL)
      {
        menu_redraw_full (menu);
+       draw_sidebar(menu->menu);
        mutt_show_error ();
      }
  
***************
*** 566,575 ****
--- 568,580 ----
  
        if (menu->redraw & REDRAW_STATUS) 
        {
+    	DrawFullLine = 1;
  	menu_status_line (buf, sizeof (buf), menu, NONULL (Status));
+    	DrawFullLine = 0;
  	CLEARLINE (option (OPTSTATUSONTOP) ? 0 : LINES-2);
  	SETCOLOR (MT_COLOR_STATUS);
          BKGDSET (MT_COLOR_STATUS);
+         set_buffystats(Context);
  	mutt_paddstr (COLS, buf);
  	SETCOLOR (MT_COLOR_NORMAL);
          BKGDSET (MT_COLOR_NORMAL);
***************
*** 583,589 ****
  	menu->oldcurrent = -1;
  
        if (option (OPTARROWCURSOR))
! 	move (menu->current - menu->top + menu->offset, 2);
        else if (option (OPTBRAILLEFRIENDLY))
  	move (menu->current - menu->top + menu->offset, 0);
        else
--- 588,594 ----
  	menu->oldcurrent = -1;
  
        if (option (OPTARROWCURSOR))
!  	move (menu->current - menu->top + menu->offset, SidebarWidth + 2);
        else if (option (OPTBRAILLEFRIENDLY))
  	move (menu->current - menu->top + menu->offset, 0);
        else
***************
*** 1051,1056 ****
--- 1056,1062 ----
  	  menu->redraw = REDRAW_FULL;
  	break;
  
+       case OP_SIDEBAR_OPEN:
        case OP_MAIN_CHANGE_FOLDER:
        
  	if (attach_msg)
***************
*** 1068,1074 ****
  	buf[0] = '\0';
  	mutt_buffy (buf, sizeof (buf));
  
! 	if (mutt_enter_fname (cp, buf, sizeof (buf), &menu->redraw, 1) == -1)
          {
            if (menu->menu == MENU_PAGER)
            {
--- 1074,1084 ----
  	buf[0] = '\0';
  	mutt_buffy (buf, sizeof (buf));
  
!  	if ( op == OP_SIDEBAR_OPEN ) {
!           if(!CurBuffy)
!             break;
!  	  strncpy( buf, CurBuffy->path, sizeof(buf) );
!         } else if (mutt_enter_fname (cp, buf, sizeof (buf), &menu->redraw, 1) == -1)
          {
            if (menu->menu == MENU_PAGER)
            {
***************
*** 1085,1090 ****
--- 1095,1101 ----
  	}
  
  	mutt_expand_path (buf, sizeof (buf));
+         set_curbuffy(buf);
  	if (mx_get_magic (buf) <= 0)
  	{
  	  mutt_error (_("%s is not a mailbox."), buf);
***************
*** 2179,2184 ****
--- 2190,2201 ----
  	mutt_what_key();
  	break;
  
+       case OP_SIDEBAR_SCROLL_UP:
+       case OP_SIDEBAR_SCROLL_DOWN:
+       case OP_SIDEBAR_NEXT:
+       case OP_SIDEBAR_PREV:
+         scroll_sidebar(op, menu->menu);
+ 	break;
        default:
  	if (menu->menu == MENU_MAIN)
  	  km_error_key (MENU_MAIN);
diff -N -c -r mutt-1.5.12-orig/flags.c mutt-1.5.12-patched/flags.c
*** mutt-1.5.12-orig/flags.c	2005-10-31 04:03:00.000000000 -0600
--- mutt-1.5.12-patched/flags.c	2006-07-20 19:32:42.000000000 -0500
***************
*** 22,29 ****
--- 22,31 ----
  
  #include "mutt.h"
  #include "mutt_curses.h"
+ #include "mutt_menu.h"
  #include "sort.h"
  #include "mx.h"
+ #include "sidebar.h"
  
  #ifdef USE_IMAP
  #include "imap_private.h"
***************
*** 275,280 ****
--- 277,283 ----
     */
    if (h->searched && (changed != h->changed || deleted != ctx->deleted || tagged != ctx->tagged || flagged != ctx->flagged))
      h->searched = 0;
+ 	draw_sidebar(0);
  }
  
  void mutt_tag_set_flag (int flag, int bf)
diff -N -c -r mutt-1.5.11-orig/functions.h mutt-1.5.11-patched/functions.h
*** mutt-1.5.11-orig/functions.h	2005-07-24 12:56:42.000000000 -0400
--- mutt-1.5.11-patched/functions.h	2006-01-27 00:29:03.000000000 -0500
***************
*** 151,156 ****
--- 151,161 ----
    { "decrypt-save",		OP_DECRYPT_SAVE,		NULL },
  
  
+   { "sidebar-scroll-up",	OP_SIDEBAR_SCROLL_UP, NULL },
+   { "sidebar-scroll-down",	OP_SIDEBAR_SCROLL_DOWN, NULL },
+   { "sidebar-next",	OP_SIDEBAR_NEXT, NULL },
+   { "sidebar-prev",	OP_SIDEBAR_PREV, NULL },
+   { "sidebar-open", OP_SIDEBAR_OPEN, NULL },
    { NULL,			0,				NULL }
  };
  
***************
*** 247,252 ****
--- 252,262 ----
    { "decrypt-save",    	OP_DECRYPT_SAVE,		NULL },
  
  
+   { "sidebar-scroll-up",	OP_SIDEBAR_SCROLL_UP, NULL },
+   { "sidebar-scroll-down",	OP_SIDEBAR_SCROLL_DOWN, NULL },
+   { "sidebar-next",	OP_SIDEBAR_NEXT, NULL },
+   { "sidebar-prev",	OP_SIDEBAR_PREV, NULL },
+   { "sidebar-open", OP_SIDEBAR_OPEN, NULL },
    { NULL,		0,				NULL }
  };
  
diff -N -c -r mutt-1.5.12-orig/globals.h mutt-1.5.12-patched/globals.h
*** mutt-1.5.12-orig/globals.h	2006-07-05 03:40:05.000000000 -0500
--- mutt-1.5.12-patched/globals.h	2006-07-20 19:35:50.000000000 -0500
***************
*** 199,204 ****
--- 199,207 ----
  WHERE short ScoreThresholdRead;
  WHERE short ScoreThresholdFlag;
  
+ WHERE struct buffy_t *CurBuffy INITVAL(0);
+ WHERE short DrawFullLine INITVAL(0);
+ WHERE short SidebarWidth;
  #ifdef USE_IMAP
  WHERE short ImapKeepalive;
  #endif
diff -N -c -r mutt-1.5.12-orig/init.h mutt-1.5.12-patched/init.h
*** mutt-1.5.12-orig/init.h	2006-07-05 03:40:05.000000000 -0500
--- mutt-1.5.12-patched/init.h	2006-07-20 19:38:49.000000000 -0500
***************
*** 1450,1455 ****
--- 1450,1465 ----
    ** If ``no'', never attempt to verify cryptographic signatures.
    ** (Crypto only)
    */
+   { "sidebar_visible", DT_BOOL, R_BOTH, OPTSIDEBAR, 0 },
+   /*
+   ** .pp
+   ** This specifies whether or not to show sidebar (left-side list of folders).
+   */
+   { "sidebar_width", DT_NUM, R_BOTH, UL &SidebarWidth, 0 },
+   /*
+   ** .pp
+   ** The width of the sidebar.
+   */
    { "smime_is_default", DT_BOOL,  R_NONE, OPTSMIMEISDEFAULT, 0},
    /*
    ** .pp
diff -N -c -r mutt-1.5.11-orig/mailbox.h mutt-1.5.11-patched/mailbox.h
*** mutt-1.5.11-orig/mailbox.h	2002-11-12 02:53:09.000000000 -0500
--- mutt-1.5.11-patched/mailbox.h	2006-01-27 00:29:03.000000000 -0500
***************
*** 27,32 ****
--- 27,33 ----
  #define M_NEWFOLDER	(1<<4) /* create a new folder - same as M_APPEND, but uses
  				* safe_fopen() for mbox-style folders.
  				*/
+ #define M_PEEK		(1<<5) /* revert atime back after taking a look (if applicable) */
  
  /* mx_open_new_message() */
  #define M_ADD_FROM	1	/* add a From_ line */
diff -N -c -r mutt-1.5.12-orig/Makefile.am mutt-1.5.12-patched/Makefile.am
*** mutt-1.5.12-orig/Makefile.am	2006-07-05 03:43:47.000000000 -0500
--- mutt-1.5.12-patched/Makefile.am	2006-07-17 20:42:43.000000000 -0500
***************
*** 65,71 ****
  	browser.h mbyte.h remailer.h url.h \
  	crypt-mod-pgp-classic.c crypt-mod-smime-classic.c \
  	pgppacket.c mutt_idna.h hcache.h hcache.c bcache.c bcache.h mutt_ssl_gnutls.c \
! 	crypt-gpgme.c crypt-mod-pgp-gpgme.c crypt-mod-smime-gpgme.c
  
  EXTRA_DIST = COPYRIGHT GPL OPS OPS.PGP OPS.CRYPT OPS.SMIME TODO UPDATING \
  	configure account.h \
--- 65,72 ----
  	browser.h mbyte.h remailer.h url.h \
  	crypt-mod-pgp-classic.c crypt-mod-smime-classic.c \
  	pgppacket.c mutt_idna.h hcache.h hcache.c bcache.c bcache.h mutt_ssl_gnutls.c \
! 	crypt-gpgme.c crypt-mod-pgp-gpgme.c crypt-mod-smime-gpgme.c \
!         sidebar.c
  
  EXTRA_DIST = COPYRIGHT GPL OPS OPS.PGP OPS.CRYPT OPS.SMIME TODO UPDATING \
  	configure account.h \
diff -N -c -r mutt-1.5.12-orig/Makefile.in mutt-1.5.12-patched/Makefile.in
*** mutt-1.5.12-orig/Makefile.in	2006-07-14 13:21:03.000000000 -0500
--- mutt-1.5.12-patched/Makefile.in	2006-07-17 20:46:18.000000000 -0500
***************
*** 95,101 ****
  	charset.$(OBJEXT) history.$(OBJEXT) lib.$(OBJEXT) \
  	muttlib.$(OBJEXT) editmsg.$(OBJEXT) utf8.$(OBJEXT) \
  	mbyte.$(OBJEXT) wcwidth.$(OBJEXT) url.$(OBJEXT) \
! 	ascii.$(OBJEXT) mutt_idna.$(OBJEXT) crypt-mod.$(OBJEXT)
  mutt_OBJECTS = $(am_mutt_OBJECTS)
  am__DEPENDENCIES_1 =
  am_mutt_dotlock_OBJECTS = mutt_dotlock.$(OBJEXT)
--- 95,102 ----
  	charset.$(OBJEXT) history.$(OBJEXT) lib.$(OBJEXT) \
  	muttlib.$(OBJEXT) editmsg.$(OBJEXT) utf8.$(OBJEXT) \
  	mbyte.$(OBJEXT) wcwidth.$(OBJEXT) url.$(OBJEXT) \
! 	ascii.$(OBJEXT) mutt_idna.$(OBJEXT) crypt-mod.$(OBJEXT) \
!         sidebar.$(OBJEXT)
  mutt_OBJECTS = $(am_mutt_OBJECTS)
  am__DEPENDENCIES_1 =
  am_mutt_dotlock_OBJECTS = mutt_dotlock.$(OBJEXT)
***************
*** 312,318 ****
  	score.c send.c sendlib.c signal.c sort.c \
  	status.c system.c thread.c charset.c history.c lib.c \
  	muttlib.c editmsg.c utf8.c mbyte.c wcwidth.c \
! 	url.c ascii.c mutt_idna.c crypt-mod.c crypt-mod.h
  
  mutt_LDADD = @MUTT_LIB_OBJECTS@ @LIBOBJS@ $(LIBIMAP) $(MUTTLIBS) \
  	$(INTLLIBS) $(LIBICONV)  $(LIBGPGME_LIBS)
--- 313,320 ----
  	score.c send.c sendlib.c signal.c sort.c \
  	status.c system.c thread.c charset.c history.c lib.c \
  	muttlib.c editmsg.c utf8.c mbyte.c wcwidth.c \
! 	url.c ascii.c mutt_idna.c crypt-mod.c crypt-mod.h \
!         sidebar.c
  
  mutt_LDADD = @MUTT_LIB_OBJECTS@ @LIBOBJS@ $(LIBIMAP) $(MUTTLIBS) \
  	$(INTLLIBS) $(LIBICONV)  $(LIBGPGME_LIBS)
***************
*** 345,351 ****
  	makedoc.c stamp-doc-rc README.SSL smime.h\
  	muttbug pgppacket.h depcomp ascii.h BEWARE PATCHES patchlist.sh	\
  	ChangeLog ChangeLog.old mkchangelog.sh cvslog2changelog.pl mutt_idna.h \
! 	snprintf.c regex.c crypt-gpgme.h
  
  EXTRA_SCRIPTS = smime_keys
  mutt_dotlock_SOURCES = mutt_dotlock.c
--- 347,353 ----
  	makedoc.c stamp-doc-rc README.SSL smime.h\
  	muttbug pgppacket.h depcomp ascii.h BEWARE PATCHES patchlist.sh	\
  	ChangeLog ChangeLog.old mkchangelog.sh cvslog2changelog.pl mutt_idna.h \
! 	snprintf.c regex.c crypt-gpgme.h sidebar.h
  
  EXTRA_SCRIPTS = smime_keys
  mutt_dotlock_SOURCES = mutt_dotlock.c
diff -N -c -r mutt-1.5.11-orig/mbox.c mutt-1.5.11-patched/mbox.c
*** mutt-1.5.11-orig/mbox.c	2005-08-02 03:08:00.000000000 -0400
--- mutt-1.5.11-patched/mbox.c	2006-01-27 00:29:03.000000000 -0500
***************
*** 97,102 ****
--- 97,103 ----
      mutt_perror (ctx->path);
      return (-1);
    }
+   ctx->atime = sb.st_atime;
    ctx->mtime = sb.st_mtime;
    ctx->size = sb.st_size;
  
***************
*** 245,250 ****
--- 246,252 ----
  
    ctx->size = sb.st_size;
    ctx->mtime = sb.st_mtime;
+   ctx->atime = sb.st_atime;
  
  #ifdef NFS_ATTRIBUTE_HACK
    if (sb.st_mtime > sb.st_atime)
diff -N -c -r mutt-1.5.12-orig/menu.c mutt-1.5.12-patched/menu.c
*** mutt-1.5.12-orig/menu.c	2006-05-18 13:44:29.000000000 -0500
--- mutt-1.5.12-patched/menu.c	2006-07-20 19:54:26.000000000 -0500
***************
*** 24,29 ****
--- 24,30 ----
  #include "mutt_curses.h"
  #include "mutt_menu.h"
  #include "mbyte.h"
+ #include "sidebar.h"
  
  #ifdef USE_IMAP
  #include "imap.h"
***************
*** 157,163 ****
  void menu_pad_string (char *s, size_t n)
  {
    int shift = option (OPTARROWCURSOR) ? 3 : 0;
!   int cols = COLS - shift;
  
    mutt_format_string (s, n, cols, cols, 0, ' ', s, strlen (s), 1);
    s[n - 1] = 0;
--- 158,164 ----
  void menu_pad_string (char *s, size_t n)
  {
    int shift = option (OPTARROWCURSOR) ? 3 : 0;
!   int cols = COLS - shift - SidebarWidth;
  
    mutt_format_string (s, n, cols, cols, 0, ' ', s, strlen (s), 1);
    s[n - 1] = 0;
***************
*** 207,212 ****
--- 208,214 ----
    char buf[STRING];
    int i;
  
+   draw_sidebar(1);
    for (i = menu->top; i < menu->top + menu->pagelen; i++)
    {
      if (i < menu->max)
***************
*** 217,223 ****
        if (option (OPTARROWCURSOR))
        {
          attrset (menu->color (i));
! 	CLEARLINE (i - menu->top + menu->offset);
  
  	if (i == menu->current)
  	{
--- 219,225 ----
        if (option (OPTARROWCURSOR))
        {
          attrset (menu->color (i));
!  	CLEARLINE_WIN (i - menu->top + menu->offset);
  
  	if (i == menu->current)
  	{
***************
*** 246,259 ****
  	  BKGDSET (MT_COLOR_INDICATOR);
  	}
  
! 	CLEARLINE (i - menu->top + menu->offset);
  	print_enriched_string (menu->color(i), (unsigned char *) buf, i != menu->current);
          SETCOLOR (MT_COLOR_NORMAL);
          BKGDSET (MT_COLOR_NORMAL);
        }
      }
      else
!       CLEARLINE (i - menu->top + menu->offset);
    }
    menu->redraw = 0;
  }
--- 248,261 ----
  	  BKGDSET (MT_COLOR_INDICATOR);
  	}
  
!  	CLEARLINE_WIN (i - menu->top + menu->offset);
  	print_enriched_string (menu->color(i), (unsigned char *) buf, i != menu->current);
          SETCOLOR (MT_COLOR_NORMAL);
          BKGDSET (MT_COLOR_NORMAL);
        }
      }
      else
!       CLEARLINE_WIN (i - menu->top + menu->offset);
    }
    menu->redraw = 0;
  }
***************
*** 268,274 ****
      return;
    }
    
!   move (menu->oldcurrent + menu->offset - menu->top, 0);
    SETCOLOR (MT_COLOR_NORMAL);
    BKGDSET (MT_COLOR_NORMAL);
  
--- 270,276 ----
      return;
    }
    
!   move (menu->oldcurrent + menu->offset - menu->top, SidebarWidth);
    SETCOLOR (MT_COLOR_NORMAL);
    BKGDSET (MT_COLOR_NORMAL);
  
***************
*** 283,295 ****
        clrtoeol ();
        menu_make_entry (buf, sizeof (buf), menu, menu->oldcurrent);
        menu_pad_string (buf, sizeof (buf));
!       move (menu->oldcurrent + menu->offset - menu->top, 3);
        print_enriched_string (menu->color(menu->oldcurrent), (unsigned char *) buf, 1);
        SETCOLOR (MT_COLOR_NORMAL);
      }
  
      /* now draw it in the new location */
!     move (menu->current + menu->offset - menu->top, 0);
      attrset (menu->color (menu->current));
      ADDCOLOR (MT_COLOR_INDICATOR);
      addstr ("->");
--- 285,297 ----
        clrtoeol ();
        menu_make_entry (buf, sizeof (buf), menu, menu->oldcurrent);
        menu_pad_string (buf, sizeof (buf));
!       move (menu->oldcurrent + menu->offset - menu->top, SidebarWidth + 3);
        print_enriched_string (menu->color(menu->oldcurrent), (unsigned char *) buf, 1);
        SETCOLOR (MT_COLOR_NORMAL);
      }
  
      /* now draw it in the new location */
!     move (menu->current + menu->offset - menu->top, SidebarWidth);
      attrset (menu->color (menu->current));
      ADDCOLOR (MT_COLOR_INDICATOR);
      addstr ("->");
***************
*** 310,316 ****
      attrset (menu->color (menu->current));
      ADDCOLOR (MT_COLOR_INDICATOR);
      BKGDSET (MT_COLOR_INDICATOR);
!     CLEARLINE (menu->current - menu->top + menu->offset);
      print_enriched_string (menu->color(menu->current), (unsigned char *) buf, 0);
      SETCOLOR (MT_COLOR_NORMAL);
      BKGDSET (MT_COLOR_NORMAL);
--- 312,318 ----
      attrset (menu->color (menu->current));
      ADDCOLOR (MT_COLOR_INDICATOR);
      BKGDSET (MT_COLOR_INDICATOR);
!     CLEARLINE_WIN (menu->current - menu->top + menu->offset);
      print_enriched_string (menu->color(menu->current), (unsigned char *) buf, 0);
      SETCOLOR (MT_COLOR_NORMAL);
      BKGDSET (MT_COLOR_NORMAL);
***************
*** 322,328 ****
  {
    char buf[STRING];
    
!   move (menu->current + menu->offset - menu->top, 0);
    menu_make_entry (buf, sizeof (buf), menu, menu->current);
    menu_pad_string (buf, sizeof (buf));
  
--- 324,330 ----
  {
    char buf[STRING];
    
!   move (menu->current + menu->offset - menu->top, SidebarWidth);
    menu_make_entry (buf, sizeof (buf), menu, menu->current);
    menu_pad_string (buf, sizeof (buf));
  
***************
*** 865,871 ****
      
      
      if (option (OPTARROWCURSOR))
!       move (menu->current - menu->top + menu->offset, 2);
      else if (option (OPTBRAILLEFRIENDLY))
        move (menu->current - menu->top + menu->offset, 0);
      else
--- 867,873 ----
      
      
      if (option (OPTARROWCURSOR))
!       move (menu->current - menu->top + menu->offset, SidebarWidth + 2);
      else if (option (OPTBRAILLEFRIENDLY))
        move (menu->current - menu->top + menu->offset, 0);
      else
diff -N -c -r mutt-1.5.12-orig/mutt_curses.h mutt-1.5.12-patched/mutt_curses.h
*** mutt-1.5.12-orig/mutt_curses.h	2006-07-11 18:38:47.000000000 -0500
--- mutt-1.5.12-patched/mutt_curses.h	2006-07-20 19:57:26.000000000 -0500
***************
*** 64,69 ****
--- 64,70 ----
  #undef lines
  #endif /* lines */
  
+ #define CLEARLINE_WIN(x) move(x,SidebarWidth), clrtoeol()
  #define CLEARLINE(x) move(x,0), clrtoeol()
  #define CENTERLINE(x,y) move(y, (COLS-strlen(x))/2), addstr(x)
  #define BEEP() do { if (option (OPTBEEP)) beep(); } while (0)
***************
*** 126,131 ****
--- 127,133 ----
    MT_COLOR_BOLD,
    MT_COLOR_UNDERLINE,
    MT_COLOR_INDEX,
+   MT_COLOR_NEW,
    MT_COLOR_MAX
  };
  
diff -N -c -r mutt-1.5.12-orig/mutt.h mutt-1.5.12-patched/mutt.h
*** mutt-1.5.12-orig/mutt.h	2006-06-08 06:49:07.000000000 -0500
--- mutt-1.5.12-patched/mutt.h	2006-07-20 19:58:53.000000000 -0500
***************
*** 420,425 ****
--- 420,426 ----
    OPTSAVEEMPTY,
    OPTSAVENAME,
    OPTSCORE,
+   OPTSIDEBAR,
    OPTSIGDASHES,
    OPTSIGONTOP,
    OPTSORTRE,
***************
*** 834,839 ****
--- 835,841 ----
  {
    char *path;
    FILE *fp;
+   time_t atime;
    time_t mtime;
    time_t mtime_cur;		/* used with maildir folders */
    off_t size;
***************
*** 870,875 ****
--- 872,878 ----
    unsigned int quiet : 1;	/* inhibit status messages? */
    unsigned int collapsed : 1;   /* are all threads collapsed? */
    unsigned int closing : 1;	/* mailbox is being closed */
+   unsigned int peekonly : 1;	/* just taking a glance, revert atime */
  } CONTEXT;
  
  typedef struct
diff -N -c -r mutt-1.5.12-orig/muttlib.c mutt-1.5.12-patched/muttlib.c
*** mutt-1.5.12-orig/muttlib.c	2006-06-08 06:51:03.000000000 -0500
--- mutt-1.5.12-patched/muttlib.c	2006-07-20 20:00:21.000000000 -0500
***************
*** 1082,1088 ****
  	ch = *src++; /* pad char */
  	/* calculate space left on line.  if we've already written more data
  	   than will fit on the line, ignore the rest of the line */
! 	count = (COLS < destlen ? COLS : destlen);
  	if (count > col)
  	{
  	  count -= col; /* how many columns left on this line */
--- 1082,1091 ----
  	ch = *src++; /* pad char */
  	/* calculate space left on line.  if we've already written more data
  	   than will fit on the line, ignore the rest of the line */
!   	if ( DrawFullLine )
!   	  count = (COLS < destlen ? COLS : destlen);
!   	else
!   	  count = ((COLS-SidebarWidth) < destlen ? COLS - SidebarWidth : destlen);
  	if (count > col)
  	{
  	  count -= col; /* how many columns left on this line */
diff -N -c -r mutt-1.5.12-orig/Muttrc mutt-1.5.12-patched/Muttrc
*** mutt-1.5.12-orig/Muttrc	2006-07-14 13:15:57.000000000 -0500
--- mutt-1.5.12-patched/Muttrc	2006-07-20 20:02:40.000000000 -0500
***************
*** 1934,1939 ****
--- 1934,1959 ----
  # function.
  # 
  # 
+ # set sidebar_visible=no
+ #
+ # Name: sidebar_visible
+ # Type: boolean
+ # Default: no
+ # 
+ # 
+ # This specifies whether or not to show sidebar (left-side list of folders).
+ # 
+ # 
+ # set sidebar_width=0
+ #
+ # Name: sidebar_width
+ # Type: number
+ # Default: 0
+ # 
+ # 
+ # The width of the sidebar.
+ # 
+ # 
  # set crypt_autosign=no
  #
  # Name: crypt_autosign
diff -N -c -r mutt-1.5.11-orig/mx.c mutt-1.5.11-patched/mx.c
*** mutt-1.5.11-orig/mx.c	2005-09-07 04:19:43.000000000 -0400
--- mutt-1.5.11-patched/mx.c	2006-01-27 00:29:03.000000000 -0500
***************
*** 620,625 ****
--- 620,626 ----
   *		M_APPEND	open mailbox for appending
   *		M_READONLY	open mailbox in read-only mode
   *		M_QUIET		only print error messages
+  *		M_PEEK		revert atime where applicable
   *	ctx	if non-null, context struct to use
   */
  CONTEXT *mx_open_mailbox (const char *path, int flags, CONTEXT *pctx)
***************
*** 639,644 ****
--- 640,647 ----
      ctx->quiet = 1;
    if (flags & M_READONLY)
      ctx->readonly = 1;
+   if (flags & M_PEEK)
+     ctx->peekonly = 1;
  
    if (flags & (M_APPEND|M_NEWFOLDER))
    {
***************
*** 738,746 ****
--- 741,761 ----
  void mx_fastclose_mailbox (CONTEXT *ctx)
  {
    int i;
+ #ifndef BUFFY_SIZE
+   struct utimbuf ut;
+ #endif
  
    if(!ctx) 
      return;
+ #ifndef BUFFY_SIZE
+   /* fix up the times so buffy won't get confused */
+   if (ctx->peekonly && ctx->path && ctx->mtime > ctx->atime)
+   {
+     ut.actime = ctx->atime;
+     ut.modtime = ctx->mtime;
+     utime (ctx->path, &ut); 
+   }
+ #endif
    
  #ifdef USE_IMAP
    if (ctx->magic == M_IMAP)
diff -N -c -r mutt-1.5.11-orig/OPS mutt-1.5.11-patched/OPS
*** mutt-1.5.11-orig/OPS	2005-07-24 12:56:42.000000000 -0400
--- mutt-1.5.11-patched/OPS	2006-01-27 00:29:03.000000000 -0500
***************
*** 177,179 ****
--- 177,184 ----
  OP_MAIN_SHOW_LIMIT "show currently active limit pattern"
  OP_MAIN_COLLAPSE_THREAD "collapse/uncollapse current thread"
  OP_MAIN_COLLAPSE_ALL "collapse/uncollapse all threads"
+ OP_SIDEBAR_SCROLL_UP "scroll the mailbox pane up 1 page"
+ OP_SIDEBAR_SCROLL_DOWN "scroll the mailbox pane down 1 page"
+ OP_SIDEBAR_NEXT "go down to next mailbox"
+ OP_SIDEBAR_PREV "go to previous mailbox"
+ OP_SIDEBAR_OPEN "open hilighted mailbox"
diff -N -c -r mutt-1.5.12-orig/pager.c mutt-1.5.12-patched/pager.c
*** mutt-1.5.12-orig/pager.c	2006-05-18 13:44:29.000000000 -0500
--- mutt-1.5.12-patched/pager.c	2006-07-20 20:24:07.000000000 -0500
***************
*** 30,35 ****
--- 30,36 ----
  #include "pager.h"
  #include "attach.h"
  #include "mbyte.h"
+ #include "sidebar.h"
  
  #include "mx.h"
  
***************
*** 1070,1076 ****
    wchar_t wc;
    mbstate_t mbstate;
  
!   int wrap_cols = COLS - WrapMargin;
    
    if (wrap_cols <= 0)
      wrap_cols = COLS;
--- 1071,1077 ----
    wchar_t wc;
    mbstate_t mbstate;
  
!   int wrap_cols = COLS - WrapMargin - SidebarWidth;
    
    if (wrap_cols <= 0)
      wrap_cols = COLS;
***************
*** 1707,1713 ****
      if ((redraw & REDRAW_BODY) || topline != oldtopline)
      {
        do {
! 	move (bodyoffset, 0);
  	curline = oldtopline = topline;
  	lines = 0;
  	force_redraw = 0;
--- 1708,1714 ----
      if ((redraw & REDRAW_BODY) || topline != oldtopline)
      {
        do {
! 	move (bodyoffset, SidebarWidth);
  	curline = oldtopline = topline;
  	lines = 0;
  	force_redraw = 0;
***************
*** 1720,1725 ****
--- 1721,1727 ----
  			    &QuoteList, &q_level, &force_redraw, &SearchRE) > 0)
  	    lines++;
  	  curline++;
+  	  move(lines + bodyoffset, SidebarWidth);
  	}
  	last_offset = lineInfo[curline].offset;
        } while (force_redraw);
***************
*** 1733,1738 ****
--- 1735,1741 ----
  	  addch ('~');
  	addch ('\n');
  	lines++;
+ 	move(lines + bodyoffset, SidebarWidth);
        }
        /* We are going to update the pager status bar, so it isn't
         * necessary to reset to normal color now. */
***************
*** 1745,1766 ****
        /* print out the pager status bar */
        SETCOLOR (MT_COLOR_STATUS);
        BKGDSET (MT_COLOR_STATUS);
!       CLEARLINE (statusoffset);
        if (IsHeader (extra))
        {
! 	size_t l1 = (COLS - 9) * MB_LEN_MAX;
  	size_t l2 = sizeof (buffer);
  	_mutt_make_string (buffer, l1 < l2 ? l1 : l2, NONULL (PagerFmt),
  			   Context, extra->hdr, M_FORMAT_MAKEPRINT);
        }
        else if (IsMsgAttach (extra))
        {
! 	size_t l1 = (COLS - 9) * MB_LEN_MAX;
  	size_t l2 = sizeof (buffer);
  	_mutt_make_string (buffer, l1 < l2 ? l1 : l2, NONULL (PagerFmt),
  			   Context, extra->bdy->hdr, M_FORMAT_MAKEPRINT);
        }
!       mutt_paddstr (COLS-10, IsHeader (extra) || IsMsgAttach (extra) ?
  		    buffer : banner);
        addstr (" -- (");
        if (last_pos < sb.st_size - 1)
--- 1748,1769 ----
        /* print out the pager status bar */
        SETCOLOR (MT_COLOR_STATUS);
        BKGDSET (MT_COLOR_STATUS);
!       CLEARLINE_WIN(statusoffset);
        if (IsHeader (extra))
        {
! 	size_t l1 = ((COLS - 9) * MB_LEN_MAX) - (SidebarWidth * MB_LEN_MAX);
  	size_t l2 = sizeof (buffer);
  	_mutt_make_string (buffer, l1 < l2 ? l1 : l2, NONULL (PagerFmt),
  			   Context, extra->hdr, M_FORMAT_MAKEPRINT);
        }
        else if (IsMsgAttach (extra))
        {
! 	size_t l1 = (COLS - 9) * MB_LEN_MAX - (SidebarWidth * MB_LEN_MAX);
  	size_t l2 = sizeof (buffer);
  	_mutt_make_string (buffer, l1 < l2 ? l1 : l2, NONULL (PagerFmt),
  			   Context, extra->bdy->hdr, M_FORMAT_MAKEPRINT);
        }
!       mutt_paddstr (COLS-10-SidebarWidth, IsHeader (extra) || IsMsgAttach (extra) ?
  		    buffer : banner);
        addstr (" -- (");
        if (last_pos < sb.st_size - 1)
***************
*** 1776,1794 ****
        /* redraw the pager_index indicator, because the
         * flags for this message might have changed. */
        menu_redraw_current (index);
  
        /* print out the index status bar */
        menu_status_line (buffer, sizeof (buffer), index, NONULL(Status));
!  
!       move (indexoffset + (option (OPTSTATUSONTOP) ? 0 : (indexlen - 1)), 0);
        SETCOLOR (MT_COLOR_STATUS);
        BKGDSET (MT_COLOR_STATUS);
!       mutt_paddstr (COLS, buffer);
        SETCOLOR (MT_COLOR_NORMAL);
        BKGDSET (MT_COLOR_NORMAL);
      }
  
!     redraw = 0;
  
      if (option(OPTBRAILLEFRIENDLY)) {
        if (brailleLine!=-1) {
--- 1779,1802 ----
        /* redraw the pager_index indicator, because the
         * flags for this message might have changed. */
        menu_redraw_current (index);
+       draw_sidebar(MENU_PAGER);
  
        /* print out the index status bar */
        menu_status_line (buffer, sizeof (buffer), index, NONULL(Status));
!       move (indexoffset + (option (OPTSTATUSONTOP) ? 0 : (indexlen - 1)),
!           SidebarWidth);
        SETCOLOR (MT_COLOR_STATUS);
        BKGDSET (MT_COLOR_STATUS);
!       mutt_paddstr (COLS-SidebarWidth, buffer);
        SETCOLOR (MT_COLOR_NORMAL);
        BKGDSET (MT_COLOR_NORMAL);
      }
  
!     /* if we're not using the index, update every time */
!     if ( index == 0 )
!       draw_sidebar(MENU_PAGER);
! 
!    redraw = 0;
  
      if (option(OPTBRAILLEFRIENDLY)) {
        if (brailleLine!=-1) {
***************
*** 2687,2692 ****
--- 2695,2706 ----
          redraw = REDRAW_FULL;
          break;
  
+       case OP_SIDEBAR_SCROLL_UP:
+       case OP_SIDEBAR_SCROLL_DOWN:
+       case OP_SIDEBAR_NEXT:
+       case OP_SIDEBAR_PREV:
+ 	scroll_sidebar(ch, MENU_PAGER);
+  	break;
        default:
  	ch = -1;
  	break;
diff -N -c -r mutt-1.5.12-orig/PATCHES mutt-1.5.12-patched/PATCHES
*** mutt-1.5.12-orig/PATCHES	2006-07-14 13:12:00.000000000 -0500
--- mutt-1.5.12-patched/PATCHES	2006-07-20 20:24:07.000000000 -0500
***************
*** 0 ****
--- 1 ----
+ patch-1.5.12.sidebar.20060720.txt
diff -N -c -r mutt-1.5.11-orig/sidebar.c mutt-1.5.11-patched/sidebar.c
*** mutt-1.5.11-orig/sidebar.c	1969-12-31 19:00:00.000000000 -0500
--- mutt-1.5.11-patched/sidebar.c	2006-02-25 01:24:16.000000000 -0500
***************
*** 0 ****
--- 1,266 ----
+ /*
+  * Copyright (C) ????-2004 Justin Hibbits <jrh29@po.cwru.edu>
+  * Copyright (C) 2004 Thomer M. Gil <mutt@thomer.com>
+  * 
+  *     This program is free software; you can redistribute it and/or modify
+  *     it under the terms of the GNU General Public License as published by
+  *     the Free Software Foundation; either version 2 of the License, or
+  *     (at your option) any later version.
+  * 
+  *     This program is distributed in the hope that it will be useful,
+  *     but WITHOUT ANY WARRANTY; without even the implied warranty of
+  *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+  *     GNU General Public License for more details.
+  * 
+  *     You should have received a copy of the GNU General Public License
+  *     along with this program; if not, write to the Free Software
+  *     Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111, USA.
+  */ 
+ 
+ 
+ #if HAVE_CONFIG_H
+ # include "config.h"
+ #endif
+ 
+ #include "mutt.h"
+ #include "mutt_menu.h"
+ #include "mutt_curses.h"
+ #include "sidebar.h"
+ #include "buffy.h"
+ #include <libgen.h>
+ #include "keymap.h"
+ #include <stdbool.h>
+ 
+ /*BUFFY *CurBuffy = 0;*/
+ static BUFFY *TopBuffy = 0;
+ static BUFFY *BottomBuffy = 0;
+ static int known_lines = 0;
+ 
+ static int quick_log10(int n)
+ {
+         char string[32];
+         sprintf(string, "%d", n);
+         return strlen(string);
+ }
+ 
+ void calc_boundaries (int menu)
+ {
+ 	BUFFY *tmp = Incoming;
+ 
+ 	if ( known_lines != LINES ) {
+ 		TopBuffy = BottomBuffy = 0;
+ 		known_lines = LINES;
+ 	}
+ 	for ( ; tmp->next != 0; tmp = tmp->next )
+ 		tmp->next->prev = tmp;
+ 
+ 	if ( TopBuffy == 0 && BottomBuffy == 0 )
+ 		TopBuffy = Incoming;
+ 	if ( BottomBuffy == 0 ) {
+ 		int count = LINES - 2 - (menu != MENU_PAGER || option(OPTSTATUSONTOP));
+ 		BottomBuffy = TopBuffy;
+ 		while ( --count && BottomBuffy->next )
+ 			BottomBuffy = BottomBuffy->next;
+ 	}
+ 	else if ( TopBuffy == CurBuffy->next ) {
+ 		int count = LINES - 2 - (menu != MENU_PAGER);
+ 		BottomBuffy = CurBuffy;
+ 		tmp = BottomBuffy;
+ 		while ( --count && tmp->prev)
+ 			tmp = tmp->prev;
+ 		TopBuffy = tmp;
+ 	}
+ 	else if ( BottomBuffy == CurBuffy->prev ) {
+ 		int count = LINES - 2 - (menu != MENU_PAGER);
+ 		TopBuffy = CurBuffy;
+ 		tmp = TopBuffy;
+ 		while ( --count && tmp->next )
+ 			tmp = tmp->next;
+ 		BottomBuffy = tmp;
+ 	}
+ }
+ 
+ char *make_sidebar_entry(char *box, int size, int new)
+ {
+ 	static char *entry = 0;
+ 	char *c;
+ 	int i = 0;
+ 
+ 	c = realloc(entry, SidebarWidth + 1);
+ 	if ( c ) entry = c;
+ 	entry[SidebarWidth] = 0;
+ 	for (; i < SidebarWidth; entry[i++] = ' ' );
+ 	i = strlen(box);
+ 	strncpy( entry, box, i < SidebarWidth ? i :SidebarWidth );
+ 
+         if (size == -1)
+                 sprintf(entry + SidebarWidth - 4, "?");
+         else if ( new ) 
+ 		sprintf(
+ 			entry + SidebarWidth - 5 - quick_log10(size) - quick_log10(new),
+ 			"% d(%d)", size, new);
+ 	else
+ 		sprintf( entry + SidebarWidth - 3 - quick_log10(size), "% d", size);
+ 	return entry;
+ }
+ 
+ void set_curbuffy(char buf[LONG_STRING])
+ {
+   BUFFY* tmp = CurBuffy = Incoming;
+ 
+   if (!Incoming)
+     return;
+ 
+   while(1) {
+     if(!strcmp(tmp->path, buf)) {
+       CurBuffy = tmp;
+       break;
+     }
+ 
+     if(tmp->next)
+       tmp = tmp->next;
+     else
+       break;
+   }
+ }
+ 
+ int draw_sidebar(int menu) {
+ 
+ 	int lines = option(OPTHELP) ? 1 : 0;
+ 	BUFFY *tmp;
+ #ifndef USE_SLANG_CURSES
+         attr_t attrs;
+ #endif
+         short color_pair;
+ 
+         static bool initialized = false;
+         static int prev_show_value;
+         static short saveSidebarWidth;
+ 
+         /* initialize first time */
+         if(!initialized) {
+                 prev_show_value = option(OPTSIDEBAR);
+                 saveSidebarWidth = SidebarWidth;
+                 if(!option(OPTSIDEBAR)) SidebarWidth = 0;
+                 initialized = true;
+         }
+ 
+         /* save or restore the value SidebarWidth */
+         if(prev_show_value != option(OPTSIDEBAR)) {
+                 if(prev_show_value && !option(OPTSIDEBAR)) {
+                         saveSidebarWidth = SidebarWidth;
+                         SidebarWidth = 0;
+                 } else if(!prev_show_value && option(OPTSIDEBAR)) {
+                         SidebarWidth = saveSidebarWidth;
+                 }
+                 prev_show_value = option(OPTSIDEBAR);
+         }
+ 
+ 
+ 	if ( SidebarWidth == 0 ) return 0;
+ 
+         /* get attributes for divider */
+ 	SETCOLOR(MT_COLOR_STATUS);
+ #ifndef USE_SLANG_CURSES
+         attr_get(&attrs, &color_pair, 0);
+ #else
+         color_pair = attr_get();
+ #endif
+         SETCOLOR(MT_COLOR_NORMAL);
+ 
+ 	/* draw the divider */
+ 
+ 	for ( ; lines < LINES-1-(menu != MENU_PAGER || option(OPTSTATUSONTOP)); lines++ ) {
+ 		move(lines, SidebarWidth - 1);
+ 		addch('|');
+ #ifndef USE_SLANG_CURSES
+                 mvchgat(lines, SidebarWidth - 1, 1, 0, color_pair, NULL);
+ #endif
+ 	}
+ 	if ( Incoming == 0 ) return 0;
+ 	lines = option(OPTHELP) ? 1 : 0; /* go back to the top */
+ 
+ 	if ( known_lines != LINES || TopBuffy == 0 || BottomBuffy == 0 ) 
+ 		calc_boundaries(menu);
+ 	if ( CurBuffy == 0 ) CurBuffy = Incoming;
+ 
+ 	tmp = TopBuffy;
+ 
+ 	SETCOLOR(MT_COLOR_NORMAL);
+ 
+ 	for ( ; tmp && lines < LINES-1 - (menu != MENU_PAGER || option(OPTSTATUSONTOP)); tmp = tmp->next ) {
+ 		if ( tmp == CurBuffy )
+ 			SETCOLOR(MT_COLOR_INDICATOR);
+ 		else if ( tmp->msg_unread > 0 )
+ 			SETCOLOR(MT_COLOR_NEW);
+ 		else
+ 			SETCOLOR(MT_COLOR_NORMAL);
+ 
+ 		move( lines, 0 );
+ 		if ( Context && !strcmp( tmp->path, Context->path ) ) {
+ 			tmp->msg_unread = Context->unread;
+ 			tmp->msgcount = Context->msgcount;
+ 		}
+                 printw( "%.*s", SidebarWidth,
+                         make_sidebar_entry(basename(tmp->path), tmp->msgcount,
+                         tmp->msg_unread));
+ 		lines++;
+ 	}
+ 	SETCOLOR(MT_COLOR_NORMAL);
+ 	for ( ; lines < LINES-1 - (menu != MENU_PAGER || option(OPTSTATUSONTOP)); lines++ ) {
+ 		int i = 0;
+ 		move( lines, 0 );
+ 		for ( ; i < SidebarWidth - 1; i++ )
+ 			addch(' ');
+ 	}
+ 	return 0;
+ }
+ 
+ 
+ void set_buffystats(CONTEXT* Context)
+ {
+         BUFFY *tmp = Incoming;
+         while(tmp) {
+                 if(Context && !strcmp(tmp->path, Context->path)) {
+ 			tmp->msg_unread = Context->unread;
+ 			tmp->msgcount = Context->msgcount;
+                         break;
+                 }
+                 tmp = tmp->next;
+         }
+ }
+ 
+ void scroll_sidebar(int op, int menu)
+ {
+         if(!SidebarWidth) return;
+         if(!CurBuffy) return;
+ 
+ 	switch (op) {
+ 		case OP_SIDEBAR_NEXT:
+ 			if ( CurBuffy->next == NULL ) return;
+ 			CurBuffy = CurBuffy->next;
+ 			break;
+ 		case OP_SIDEBAR_PREV:
+ 			if ( CurBuffy->prev == NULL ) return;
+ 			CurBuffy = CurBuffy->prev;
+ 			break;
+ 		case OP_SIDEBAR_SCROLL_UP:
+ 			CurBuffy = TopBuffy;
+ 			if ( CurBuffy != Incoming ) {
+ 				calc_boundaries(menu);
+ 				CurBuffy = CurBuffy->prev;
+ 			}
+ 			break;
+ 		case OP_SIDEBAR_SCROLL_DOWN:
+ 			CurBuffy = BottomBuffy;
+ 			if ( CurBuffy->next ) {
+ 				calc_boundaries(menu);
+ 				CurBuffy = CurBuffy->next;
+ 			}
+ 			break;
+ 		default:
+ 			return;
+ 	}
+ 	calc_boundaries(menu);
+ 	draw_sidebar(menu);
+ }
diff -N -c -r mutt-1.5.11-orig/sidebar.h mutt-1.5.11-patched/sidebar.h
*** mutt-1.5.11-orig/sidebar.h	1969-12-31 19:00:00.000000000 -0500
--- mutt-1.5.11-patched/sidebar.h	2006-01-27 00:29:03.000000000 -0500
***************
*** 0 ****
--- 1,36 ----
+ /*
+  * Copyright (C) ????-2004 Justin Hibbits <jrh29@po.cwru.edu>
+  * Copyright (C) 2004 Thomer M. Gil <mutt@thomer.com>
+  * 
+  *     This program is free software; you can redistribute it and/or modify
+  *     it under the terms of the GNU General Public License as published by
+  *     the Free Software Foundation; either version 2 of the License, or
+  *     (at your option) any later version.
+  * 
+  *     This program is distributed in the hope that it will be useful,
+  *     but WITHOUT ANY WARRANTY; without even the implied warranty of
+  *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+  *     GNU General Public License for more details.
+  * 
+  *     You should have received a copy of the GNU General Public License
+  *     along with this program; if not, write to the Free Software
+  *     Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111, USA.
+  */ 
+ 
+ #ifndef SIDEBAR_H
+ #define SIDEBAR_H
+ 
+ struct MBOX_LIST {
+ 	char *path;
+ 	int msgcount;
+ 	int new;
+ } MBLIST;
+ 
+ /* parameter is whether or not to go to the status line */
+ /* used for omitting the last | that covers up the status bar in the index */
+ int draw_sidebar(int);
+ void scroll_sidebar(int, int);
+ void set_curbuffy(char*);
+ void set_buffystats(CONTEXT*);
+ 
+ #endif /* SIDEBAR_H */
